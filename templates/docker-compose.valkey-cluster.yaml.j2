networks:
  app:

# main nodes where data is sharded
x-valkey-cluster: &valkey
  image: bitnami/valkey-cluster:8.1
  ulimits:
    memlock: -1
  networks:
    app:

# read only replicas for read requests
x-valkey-replica: &valkeyReplica
  <<: *valkey
  depends_on:
  {%- for i in range(primaries) %}
      - valkey-primary-{{i}}
  {%- endfor %}

x-nodes: &nodes
  VALKEY_NODES: {% for j in range(primaries) %}valkey-primary-{{j}} {% endfor %}{% for j in range((primaries*replicas_per_primary)) %}valkey-replica-{{j}} {% endfor %}

x-creator: &creator
  # marks this instance as a primary node
  VALKEY_CLUSTER_CREATOR: yes
  # for replication for each primary
  # so for 3 primaries and this at 2, each node wants 2 replicas somewhere in the cluster
  VALKEY_CLUSTER_REPLICAS: {{replicas_per_primary}}

x-env-defaults: &keys
  # no persistence
  VALKEY_AOF_ENABLED: no
  VALKEY_RDB_POLICY_DISABLED: yes
  # no password
  ALLOW_EMPTY_PASSWORD: yes
  # make sure all nodes are up before any lookup attempts
  VALKEY_CLUSTER_SLEEP_BEFORE_DNS_LOOKUP: 10


services:
{%- for i in range(primaries) %}
  valkey-primary-{{i}}:
    <<: *valkey
    hostname: valkey-primary-{{i}}
    {%- if i == 0 and not with_app %}
    # local setup, make first node expose its port
    ports:
      - 6379:6379
    {%- endif %}
    environment:
      <<: [*nodes, *creator, *keys]
{% endfor %}
{%- for i in range((primaries*replicas_per_primary)) %}
  valkey-replica-{{i}}:
    <<: *valkeyReplica
    hostname: valkey-replica-{{i}}
    environment:
      <<: [*nodes, *keys]
{% endfor %}
{%- if with_app %}
  app:
    image: spring-redis-playground:1.0-SNAPSHOT
    ports:
      - 8080:8080
    networks:
      app:
    environment:
      JAVA_TOOL_OPTIONS: -XX:MaxDirectMemorySize=100M
      SPRING_PROFILES_ACTIVE: container
    deploy:
      resources:
        limits:
          memory: 8G
{% endif %}