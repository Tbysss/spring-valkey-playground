networks:
  app:

# main nodes where data is sharded
x-valkey-cluster: &valkey
  image: bitnami/valkey-cluster:8.1
  ulimits:
    memlock: -1
  command:
    - bash
    - -c
    - |
      # Load Valkey environment variables
      . /opt/bitnami/scripts/valkey-cluster-env.sh
      # Load libraries
      . /opt/bitnami/scripts/libvalkeycluster.sh
      # allow reads during failure states (e.g. during failover)
      valkey_conf_set cluster-allow-reads-when-down yes
      # no: allow incomplete cluster to continue serving requests
      # may result in inconsistent data during failover
      valkey_conf_set cluster-require-full-coverage yes

      # important settings for high availability:
      # cluster-replica-validity-factor 0
      # see https://valkey.io/topics/cluster-tutorial/
      # the other factor: repl-ping-replica-period, by default 10s
      # HA settings:
      valkey_conf_set cluster-replica-validity-factor 0
      valkey_conf_set repl-ping-replica-period 2
      # how long to wait for the failover to start (ms)
      # does not matter in case we set cluster-replica-validity-factor to 0
      valkey_conf_set cluster-node-timeout 2000
      # -> will not try to failover for 2s (repl-ping-replica-period), on node failure

      # run the original command
      /opt/bitnami/scripts/valkey-cluster/run.sh

# read only replicas for read requests
x-valkey-replica: &valkeyReplica
  <<: *valkey
  depends_on:
  {%- for i in range(primaries) %}
      - valkey-primary-{{i}}
  {%- endfor %}

x-nodes: &nodes
  VALKEY_NODES: {% for j in range(primaries) %}valkey-primary-{{j}} {% endfor %}{% for j in range((primaries*replicas_per_primary)) %}valkey-replica-{{j}} {% endfor %}

x-creator: &creator
  # marks this instance as a primary node
  VALKEY_CLUSTER_CREATOR: yes
  # for replication for each primary
  # so for 3 primaries and this at 2, each node wants 2 replicas somewhere in the cluster
  VALKEY_CLUSTER_REPLICAS: {{replicas_per_primary}}

x-env-defaults: &keys
  # no persistence
  VALKEY_AOF_ENABLED: no
  VALKEY_RDB_POLICY_DISABLED: yes
  # no password
  ALLOW_EMPTY_PASSWORD: yes
  # make sure all nodes are up before any lookup attempts
  VALKEY_CLUSTER_SLEEP_BEFORE_DNS_LOOKUP: 10


services:
{%- for i in range(primaries) %}
  valkey-primary-{{i}}:
    <<: *valkey
    hostname: valkey-primary-{{i}}
    {%- if i == 0 and not with_app %}
    # local setup, make first node expose its port
    ports:
      - 6379:6379
    {%- endif %}
    networks:
      app:
        aliases:
          - valkey
    environment:
      <<: [*nodes, *creator, *keys]
{% endfor %}
{%- for i in range((primaries*replicas_per_primary)) %}
  valkey-replica-{{i}}:
    <<: *valkeyReplica
    hostname: valkey-replica-{{i}}
    networks:
      app:
    environment:
      <<: [*nodes, *keys]
{% endfor %}
{%- if with_app %}
  app:
    image: spring-redis-playground:1.0-SNAPSHOT
    ports:
      - 8080:8080
    networks:
      app:
    environment:
      JAVA_TOOL_OPTIONS: -XX:MaxDirectMemorySize=100M
      SPRING_PROFILES_ACTIVE: container
    deploy:
      resources:
        limits:
          memory: 8G
{% endif %}